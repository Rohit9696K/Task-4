import os
import numpy as np
import cv2
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

# Path to the dataset folder
DATASET_PATH = 'leapGestRecog/00'  # change if using other subject folders

# Parameters
IMG_SIZE = 128
GESTURE_CLASSES = 10  # Each subject has 10 gestures

# Load data
def load_data(base_path):
    images, labels = [], []
    for gesture_id in range(GESTURE_CLASSES):
        gesture_folder = os.path.join(base_path, f'gesture{gesture_id+1:02d}')
        for subject in os.listdir(gesture_folder):
            for round in os.listdir(os.path.join(gesture_folder, subject)):
                img_folder = os.path.join(gesture_folder, subject, round)
                for img_file in os.listdir(img_folder):
                    img_path = os.path.join(img_folder, img_file)
                    img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
                    if img is not None:
                        img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
                        images.append(img)
                        labels.append(gesture_id)
    return np.array(images), np.array(labels)

# Load images and labels
X, y = load_data(DATASET_PATH)
X = X / 255.0  # Normalize
X = X.reshape(-1, IMG_SIZE, IMG_SIZE, 1)  # CNN input shape
y = to_categorical(y)

# Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model
model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 1)),
    MaxPooling2D((2,2)),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D((2,2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(GESTURE_CLASSES, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()

# Train
history = model.fit(X_train, y_train, epochs=10, batch_size=64, validation_split=0.1)

# Evaluate
test_loss, test_acc = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {test_acc*100:.2f}%")
